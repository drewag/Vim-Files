# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3:/* data */}
	};

# If Condition
snippet if
	if( ${1:/* condition */} )
	{
		${2:/* code */}
	}
snippet else
	else
	{
		${1}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do
	{
		${2:/* code */}
	} while( ${1:/* condition */} );
# While Loop
snippet while
	while( ${1:/* condition */} )
	{
		${2:/* code */}
	}
# For Loop
snippet for
	for( ${1:i} = 0; $1 < ${2:count}; $1${3:++} )
	{
		${4:/* code */}
	}
# Custom For Loop
snippet forr
	for( ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++} )
	{
		${5:/* code */}
	}
# Function
snippet func
	${3:void} ${2:class}::${1:function_name}(${5:})
	{
		${6:/* code */}
	} // end of $2::$1
# Switch
snippet switch
	switch( ${1:var} )
	{
		${2}
		
		default:
			UTL_assert_always();
			break;
	} // end of $1 switch
snippet case
	case ${1:val}:
		${2}
		break;
	
# Function Declaration
snippet funcd
	//----------------------------------------------------------------
	//! ${4:Short description}
	//----------------------------------------------------------------
	${1:void} ${2:function_name}(${3:});
# Typedef
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet struct
	struct
	{
		${1:/* data */}
	};
# Typedef struct
snippet tdstruct
	typedef struct
	{
		${1:/* data */}
	} ${2:type_name`};
# Typdef enum
snippet enum
	typedef uint8 ${1:enum_name}; enum /* ${2:description} */
	{
		${3:/* data */}
	};
# Comments
snippet comment
	/*----------------------------------------------------------
	${1}
	----------------------------------------------------------*/
# Function comment
snippet fcomment
	//----------------------------------------------------------------
	//! ${1:Short description}
	//----------------------------------------------------------------
